day01

flask框架的安装，编写helloe world

环境说明: win10/python35
安装：
1. 打开命令行窗口, 执行命令workon py35激活之前创建好的python3虚拟目录
c:\Projects\GitHub>workon py35
(py35) c:\Projects\GitHub>python
Python 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
2. 执行pip install flask自动安装flask包

基本概念说明：
路由映射：客户端的url请求与Flask程序实例里处理函数之间的关系
使用@app.route装饰器来将相应函数注册为路由
注册视图函数的方式：
1. 不带参数
@app.route('/')
def hello():
    return 'Hello Flask'
    
2. 带参数(动态路由)
@app.route('/user/<name>'):
 def hello(name):
    return 'Hello {user}!'.format(user=name)

指定参数类型：
@app.route('/user/<int:id>):

context的理解（上下文，程序环境）
Flask中包括的两种context： application context， request context
current_app：当前激活程序的程序实例（程序上下文）
g：处理请求时用作临时存储的对象。每次请求都会重设这个变量（程序上下文）
request：请求对象，封装了客户端发出的HTTP 请求中的内容（请求上下文）
session：用户会话，用于存储请求之间需要“记住”的值的词典（请求上下文）

使用app.url_map查看程序中添加了的路由
>>>from hello import app
>>>app.url_map
>>>Map([<Rule '/' (HEAD, GET, OPTIONS) -> index>,
 <Rule '/static/<filename>' (HEAD, GET, OPTIONS) -> static>,
 <Rule '/user/<name>' (HEAD, GET, OPTIONS) -> user>])
 注意/static/<filename>是Flask添加的静态路由，用来访问程序的静态文件
 
 
 请求hook
 Flask使用装饰器实现了四种请求钩子，用以在处理请求（进入视图函数）前或处理之后执行一些代码。
 被注册的函数会在请求被分发到对应的视图函数之前或之后被调用，这些函数与视图函数之间通过程序上下文g来共享数据
 • before_first_request：注册一个函数，在处理第一个请求之前运行。
• before_request：注册一个函数，在每次请求之前运行。
• after_request：注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。
• teardown_request：注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。


Flask的响应
1. 最简单的响应是在视图函数中直接return字符串，这个字符串将会作为页面内容显示在浏览器界面上
2. return的字符串后面可以添加状态码（如成功响应返回200状态码）
3. return的内容除了元组外还可以是response对象，response对象由make_response方法生成，调用response的方法可以设置一些额外属性
4. 调用redirect方法实现页面跳转
from flask import redirect
@app.route('/')
def index():
    return redirect('http://www.example.com')
5. 调用abort方法返回错误状态码，并跳出视图函数，abort 不会把控制权交还给调用它的函数，而是抛出异常把控制权交给Web 服务器。
from flask import abort
@app.route('/user/<id>')
def get_user(id):
    user = load_user(id)
    if not user:
        abort(404)
    return '<h1>Hello, %s</h1>' % user.name
    
模板
http://jinja.pocoo.org
Flask内置了jinja2模板，模板可以理解成嵌入了代码或者变量的html页面，这些代码部分或者变量部分起到一个占位符或者动态变量的作用
使用模板的好处
html代码放到模板里，视图函数可以专心写业务逻辑，这样做可以将前端界面展现的代码与后台逻辑处理的代码分离开，也便于程序的阅读
怎么使用
1. 在程序根目录下创建一个templates文件夹，编写html模板，并存放在templates文件夹下。
2. 在主程序的视图函数中，引入render_template函数，将render_template函数的执行结果作为视图函数的返回值返回
3. render_template函数的第一个参数是模板文件名，第二个参数是键值对，这些键值对对应的值会传递到模板里并替代模板里的变量
4. 模板里使用{{ var }}格式的代码用来存放变量，变量可以是多种类型，如list，字典，对象等。
4.1 变量可以使用过滤器(|)进行处理
表3-1　Jinja2变量过滤器
过滤器名        说明
safe        渲染值时不转义
capitalize  把值的首字母转换成大写，其他字母转换成小写
lower       把值转换成小写形式
upper       把值转换成大写形式
title       把值中每个单词的首字母都转换成大写
trim        把值的首尾空格去掉
striptags   渲染之前把值中所有的HTML 标签都删掉
5. 模板里也可以编写控制结构，或者叫代码块
5.1 if语句块
{% if ... %}
/// html code here
{% else %}
/// html code here
{% endif %}
5.2 for 语句块
{% for i in var_name %}  ####这里的var_name不需要加{{ }}
<li> {{ i }} </li>
{% endfor %}
5.3 宏的支持，类似于python里的函数
{% macro render_comment(comment) %}
<li>{{ comment }}</li>
{% endmacro %}
<ul>
{% for comment in comments %}
{{ render_comment(comment) }}
{% endfor %}
</ul>
5.4 模板的继承
编写父模板base.html，在父模板里使用{% block block_name %} ... {% endblock %}语法定义块
在子模板中，使用{% extends 'base.html' %}语法继承父模板

使用Flask-BootStrap
安装： pip install flask-bootstrap
使用
from flask.ext.bootstrap import Bootstrap
from flask import Flask
app = Flask(__name__)
bootstrap = Bootstrap(app)
继承bootstrap的base模板
{% extends 'boostrap/base.html' %}
如果要在衍生模板中添加新的JavaScript 文件，需要这么定义scripts 块：
{% block scripts %}
{{ super() }}
<script type="text/javascript" src="my-script.js"></script>
{% endblock %}
 
错误页面的路由
@app.errorhandler(404)
def handle_error(e):
    return render_template('404.html'), 404
    
@app.errorhandler(500)
