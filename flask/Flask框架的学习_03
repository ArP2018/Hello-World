数据库的支持
Flask使用sqlalchemy框架来实现ORM，Flask对SqlAlchemy进行了包装，可以下载flask-sqlalchemy包
pip install flask-sqlalchemy

常用的列类型
类型名Python类型说　　明
Integer int 普通整数，一般是32 位
SmallInteger int 取值范围小的整数，一般是16 位
BigInteger int 或long 不限制精度的整数
Float float 浮点数
Numeric decimal.Decimal 定点数
String str 变长字符串
Text str 变长字符串，对较长或不限长度的字符串做了优化
Unicode unicode 变长Unicode 字符串
UnicodeText unicode 变长Unicode 字符串，对较长或不限长度的字符串做了优化
Boolean bool 布尔值
Date datetime.date 日期
Time datetime.time 时间
DateTime datetime.datetime 日期和时间
Interval datetime.timedelta 时间间隔
Enum str 一组字符串
PickleType 任何Python 对象自动使用Pickle 序列化
LargeBinary str 二进制文件

常用的数据库列选项
primary_key 如果设为True，这列就是表的主键
unique 如果设为True，这列不允许出现重复的值
index 如果设为True，为这列创建索引，提升查询效率
nullable 如果设为True，这列允许使用空值；如果设为False，这列不允许使用空值
default 为这列定义默认值

使用：
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)
db = SQLAlchemey(app)    #这里实例化的SQLAlchemy对象db使用方法

user = User()
...
db.session.add(user)
db.session.commit()

e.g.
用户和角色模型
# 角色
class Role(db.Model):
    __tablename__ = 'roles'       # 指定需要映射成的数据表表名
    id = db.Column(db.Integer, primary_key=True)     # 主键
    name = db.Column(db.String(64), index=True, unique=True)    
    # 与User表的关联关系，backref参数指定的是从user对象访问role对象时使用的名字
    users = db.relationship('User', backref='role', lazy='dynamic') 
    
    #访问role对象时返回的形式
    def __repr__(self):
        return '<Role %r>'%self.name    

# 用户
class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    role_id = db.Column(db.Integer, db.ForeignKey='roles.id')      # 外键字段

