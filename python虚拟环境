以下操作在windows上进行

1. 首先保证本机已经安装有一个可以正常执行的python版本，假设是python3.5
2. 使用pip命令下载virtualenv包
   pip install virtualenv
3. 下载一个python2.7
4. 创建一个存放各版本python虚拟环境的目录（例如 C:\Pyenvs）
5. 打开命令行，切换到已创建好的目录，使用virtualenv命令创建一个py27的虚拟环境
   virtualenv -p C:\Python27\python.exe py27

至此，2.7版本的python虚拟环境已经创建好到C:\Pyenvs\py27目录
如何激活与退出虚拟环境
1. 切到py27目录下的Scripts目录
C:\Pyenvs>cd py27
C:\Pyenvs\py27>cd Scripts
2. 运行目录下的activate命令，命令行前面显示(py27)，表示已经切换到py27的环境
C:\PyEnvs\py35\Scripts>activate
(py27) C:\PyEnvs\py35\Scripts>
3. 运行python可以查看到目前python版本显示的是2.7
4. 同样在py27/Scripts目录下，运行deactivate.bat即可退出py27的虚拟环境

但是，每次都要切到虚拟环境目录执行activate，明显比较麻烦
解决方法是安装virtualenvwrapper(linux版)/virtualenvwrapper-win(windows版)
1. pip install virtualenvwrapper-win
2. 设置环境变量 WORKON_HOME ： C:\Pyenvs(存放各个版本虚拟环境的根目录)
3. mkvirtualenv -p C:\Python36\python.exe py36 执行完后会自动进入创建好的虚拟环境
4. 执行deactivate 退出
5. 执行workon命令可以查看目前已有的虚拟环境列表
6. 执行workon 虚拟环境名 即可激活对应的虚拟环境 
   workon py27
   
 
Linux上使用virtualenv包操作虚拟环境
1. 首先安装virtualenv  ->  pip install virtualenv
2. 安装virtualenvwrapper   -> pip install virtualenvwrapper
这里需要主要，因为我使用的是linux自带的python，所以virtualenv和virtualenvwrapper安装好之后默认是在/bin目录下
如果是使用自己安装的python，默认会安装到/usr/local/bin目录下

# Setup:
#
#  1. Create a directory to hold the virtual environments.
#     (mkdir $HOME/.virtualenvs).
#  2. Add a line like "export WORKON_HOME=$HOME/.virtualenvs"
#     to your .bashrc.
#  3. Add a line like "source /path/to/this/file/virtualenvwrapper.sh"
#     to your .bashrc.
#  4. Run: source ~/.bashrc
#  5. Run: workon
#  6. A list of environments, empty, is printed.
#  7. Run: mkvirtualenv temp
#  8. Run: workon
#  9. This time, the "temp" environment is included.
# 10. Run: workon temp
# 11. The virtual environment is activated.

workon:列出虚拟环境列表

lsvirtualenv:同上

mkvirtualenv [envname]:新建虚拟环境

workon [envname]:切换虚拟环境

rmvirtualenv  [envname]:删除虚拟环境

deactivate: 离开虚拟环境

cpvirtualenv [sorce] [dest]　　#复制虚拟环境

pip freeze > requirements.txt　　导出该环境下所有依赖到requirements.txt文件
