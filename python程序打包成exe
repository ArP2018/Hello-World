说一说python程序打包成exe可执行文件。
这两天在做一个电脑屏幕二维码自动识别的小程序，原来也没做过这个，于是乎百度Google一通搜索，找到相应的开源库后花了几个小时就完成了一个简单的版本，原
本以为已经完成98%，就差简简单单的打包一步，却没想到在这一步折腾了一整天。虽然最后发现打包好的exe程序运行报错并非是打包的问题，但是经过这一番折腾，多少
还是有一些收获，比如更加熟悉了python虚拟环境的使用，遇到问题一定要找对分析方向，不然半小时能解决的问题可能要花一天。
下面回到正题，说一说如何将python程序打包成一个不需要安装python就可以在windows环境下执行的exe文件。

常用的python打包工具有py2exe以及pyinstaller，本文只介绍在windows环境下pyinstaller的使用，为什么不选择py2exe，会在文章末尾提到。

1. 使用pip方式来安装pyinstaller
pip install pyinstaller
tip: 
安装pyinstaller之前，请确保本地已经安装好了python环境，因为pyinstaller其实是一个python开发的包。
推荐使用pip的方式来安装，pip会同时安装pyinstaller的依赖包，比如pywin32. 

2. 准备好需要打包的python程序

hello.py

# encoding: utf-8

print('hello world!')

3. 在命令行中执行如下命令
pyinstaller test.py

tip: 
命令行执行完毕后会在当前目录下生成build和dist子目录，所以建议在执行命令前先切换至程序所在目录
如果程序有多个模块文件，那么只需要指定程序入口文件即可，pyinstaller会去找程序中的依赖模块
如果想只生成一个exe文件，可以加上-F参数
如果是GUI程序，本身就有窗口，不想出现命令行，可以加上参数-w
如果想为exe生成一个图标，可以使用-i参数，后面跟上ico文件名的方式
添加静态文件请使用--add-data参数
更多的参数使用请参看详细文档

踩过的坑：
1. 如果程序里使用了pandas包，打包过程不会报错，但是程序运行会报错，在命令行中查看运行日志，百度后的解决方案：在打包的命令后添加
--hidden-import=pandas._libs.tslibs.timedeltas， 具体原因等有时间再研究
2. 程序里使用了pyzbar这个包，在开发环境下运行正常，打包后执行exe会报找不到dll的错误，仔细分析后发现pyzbar这个包会在安装过程中安装两个dll文件，使用
这个包的程序会依赖于这两个dll，所以打包完成后需要将这两个dll文件拷贝到打包exe所在的根目录下（或者在打包命令中使用add-data参数添加）
3. 如果程序是桌面应用程序，那么打包成一个单独的exe文件打开速度会很慢，还没找到原因以及解决办法，打包成目录没有这个问题

不适用py2exe的原因：
对于我们追求效（懒）率（惰）的人来说，py2exe操作起来相对有些麻烦，首先需要编写一个setup.py文件，然后才执行打包命令
py2exe只有针对python2.7的32位版本可以打包成一个文件



